import 'dart:io';
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'package:http/http.dart' as http;

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: ImagePickerDemo(),
    );
  }
}

class ImagePickerDemo extends StatefulWidget {
  @override
  _ImagePickerDemoState createState() => _ImagePickerDemoState();
}

class _ImagePickerDemoState extends State<ImagePickerDemo> {
  File? _image;
  String? _resultMessage; // State variable to hold server response

  Future<void> _pickImage() async {
    final pickedFile = await ImagePicker().getImage(source: ImageSource.gallery);
    setState(() {
      _image = File(pickedFile!.path);
    });
  }

  Future<void> _uploadImage() async {
    if (_image == null) return;
    final uri = Uri.parse('http://localhost:3000/predict');
    var request = http.MultipartRequest('POST', uri);
    request.files.add(await http.MultipartFile.fromPath('image', _image!.path));
    var response = await request.send();

    if (response.statusCode == 200) {
      final responseData = await http.Response.fromStream(response);
      final jsonResponse = jsonDecode(responseData.body);
      
      setState(() {
        _resultMessage = 'Prediction: ${jsonResponse['predictions']}';
      });
    } else {
      setState(() {
        _resultMessage = 'Failed to upload image';
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Brain Tumor Detection')),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            _image == null ? Text('No image selected.') : Image.file(_image!),
            ElevatedButton(onPressed: _pickImage, child: Text('Pick Image')),
            ElevatedButton(onPressed: _uploadImage, child: Text('Upload Image')),
            SizedBox(height: 20),
            _resultMessage == null
                ? Container()
                : Text(
                    _resultMessage!,
                    style: TextStyle(fontSize: 16, color: Colors.black),
                  ),
          ],
        ),
      ),
    );
  }
}
